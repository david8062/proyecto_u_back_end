// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////Enum Definitions/////////////////////

enum level {
  BASIC
  INTERMEDIATE
  ADVANCED
}



///////////////////Model Definitions login/////////////////////
model User {
  uniqueID         String   @id @default(uuid())
  primer_nombre    String   @db.VarChar(70)
  segundo_nombre   String?  @db.VarChar(70)
  primer_apellido  String   @db.VarChar(70)
  segundo_apellido String   @db.VarChar(70)
  cod_estudiante   String?  @db.VarChar(20)
  email            String   @unique @db.VarChar(70)
  has_password     String   @db.VarChar(256)

  faculty_uuid     String
  rol_uuid         String   // <--- Relación directa al rol
  id_password_reset String?

  // Relaciones
  faculty       Faculty    @relation(fields: [faculty_uuid], references: [uniqueID])
  role          Rol        @relation(fields: [rol_uuid], references: [uniqueID])
  passwordReset PasswordReset?
  loginAttempts LoginAttemp[]

  Review Review[]

  ENROLLMENT ENROLLMENT[]

  Course Course[]
}

model Faculty {
  uniqueID     String   @id @default(uuid())
  faculty_name String   @db.VarChar(30)

  users        User[]
  careers      UniversityCarrer[] // ← relación inversa
  Categorys Category[] // ← relación inversa
}


model Rol {
  uniqueID    String   @id @default(uuid())
  name_rol    String   @db.VarChar(10)
  users       User[]   // Relación inversa
  permissions RolePermission[]
}



model RolePermission {
  uuid             String   @id @default(uuid())
  view_permission  String   @db.VarChar(10)
  action_permission String  @db.VarChar(10)

  rol_id           String
  rol              Rol     @relation(fields: [rol_id], references: [uniqueID])
}

model PasswordReset {
  uniqueID     String   @id @default(uuid())
  fecha        DateTime
  old_password String
  new_password String
  ip           String
  user_id      String   @unique

  user         User     @relation(fields: [user_id], references: [uniqueID])
}

model VerifyToken {
  uniqueID String  @id @default(uuid())
  token    String  @db.VarChar(50)
  otp      String  @db.VarChar(6)

  loginAttempts LoginAttemp[]
}

model LoginAttemp {
  unique_ID     String   @id @default(uuid())
  ip            Int
  quantity      Int
  login_acces   DateTime
  user_id       String
  id_token      String

  user          User       @relation(fields: [user_id], references: [uniqueID])
  verifyToken   VerifyToken @relation(fields: [id_token], references: [uniqueID])
}

//////////////////////Model Definitions Course/////////////////////
model UniversityCarrer {
  uniqueID String @id @default(uuid())
  name     String @db.VarChar(20)  

  faculty_id String
  faculty    Faculty @relation(fields: [faculty_id], references: [uniqueID])

  categories Category[] // ← relación inversa
}

model Category {
  uniqueID String @id @default(uuid())
  name     String @db.VarChar(10)
  description String @db.VarChar(255)
  universityCarrerID String
  facultyID String

  UniversityCarrer UniversityCarrer @relation(fields: [universityCarrerID], references: [uniqueID])
  faculty Faculty @relation(fields: [facultyID], references: [uniqueID])


  Course Course[]
}


model Tag {
  uniqueID String   @id @default(uuid())
  name     String   @db.VarChar(10)

  courses  Course[] @relation("CourseTags")
}

model Course {
  uniqueID     String   @id @default(uuid())
  name         String   @db.VarChar(50)
  description  String   @db.VarChar(255)
  title        String   @db.VarChar(15)
  level        level    @default(BASIC)  
  url_image    String   @db.VarChar(255)
  category_id  String
  teachaer_user_id String
  tags         Tag[]    @relation("CourseTags")

  Classes Classes[]

  ENROLLMENT ENROLLMENT[]
  category     Category @relation(fields: [category_id], references: [uniqueID])
  teacher      User     @relation(fields: [teachaer_user_id], references: [uniqueID])
}

model Review {
  uniqueID String @id @default(uuid())
  review   String @db.VarChar(255)
  rating   Int

  user_id  String
  class_id String

  user    User    @relation(fields: [user_id], references: [uniqueID])
  class   Classes @relation(fields: [class_id], references: [uniqueID])
}


 model Classes {
  uniqueID String @id @default(uuid())
  description String @db.VarChar(255)
  title String @db.VarChar(25)
  url_video String @db.VarChar(255)
  course_id String
  course Course @relation(fields: [course_id], references: [uniqueID])
  Review Review[]
 }

 model ENROLLMENT {
  uniqueID String @id @default(uuid())
  user_id String
  coursed_id String

  user User @relation(fields: [user_id], references: [uniqueID])
  course Course @relation(fields: [coursed_id], references: [uniqueID])
 }